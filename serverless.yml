service: astroport-graph-api
useDotenv: true
variablesResolutionMode: 20210326

plugins:
  - serverless-dotenv-plugin
  - serverless-plugin-typescript
  - serverless-plugin-conditional-functions
  - serverless-offline

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221

functions:
  aggregator:
    enabled: '"${env:ENABLE_FUNCTION_AGGREGATOR}" == "true"'
    handler: src/aggregator/index.run
    events:
      - schedule: rate(5 minutes)
    timeout: 295 # in seconds
    environment:
      MONGODB_URL: ${env:MONGODB_URL_RW}

  aggregatorHourly:
    enabled: '"${env:ENABLE_FUNCTION_AGGREGATOR_HOURLY}" == "true"'
    handler: src/aggregatorHourly/index.run
    events:
      - schedule: rate(1 hour)
    timeout: 295 # in seconds
    environment:
      MONGODB_URL: ${env:MONGODB_URL_RW}

  collector:
    enabled: '"${env:ENABLE_FUNCTION_COLLECTOR}" == "true"'
    handler: src/collector/index.run
    events:
      - schedule: rate(8 minutes)
    timeout: 475 # in seconds
    environment:
      MONGODB_URL: ${env:MONGODB_URL_RW}

  collectorHourly:
    enabled: '"${env:ENABLE_FUNCTION_COLLECTOR_HOURLY}" == "true"'
    handler: src/collectorHourly/index.run
    events:
      - schedule: rate(1 hour)
    timeout: 475 # in seconds
    environment:
      MONGODB_URL: ${env:MONGODB_URL_RW}

  snapshot-bot:
    enabled: '"${env:ENABLE_FUNCTION_SNAPSHOT_BOT}" == "true"'
    handler: src/bot/stat-snapshotter/index.run
    events:
      - schedule: rate(5 minutes)
    timeout: 55 # in seconds
    environment:
      MONGODB_URL: ${env:MONGODB_URL_RW}

  governance-proposal-collector:
    enabled: '"${env:ENABLE_FUNCTION_GOVERNANCE_PROPOSAL_COLLECTOR}" == "true"'
    handler: src/governance/index.run
    events:
      - schedule: rate(1 minute)
    timeout: 55 # in seconds
    environment:
      MONGODB_URL: ${env:MONGODB_URL_RW}

  governance-state-transition-bot: # TODO change to prod values
    enabled: '"${env:ENABLE_FUNCTION_GOVERNANCE_STATE_TRANSITION_BOT}" == "true"'
    handler: src/bot/governance-state-transition-bot/index.run
    events:
      - schedule: rate(1 minute)
    timeout: 30 # in seconds
    environment:
      MONGODB_URL: ${env:MONGODB_URL_RW}

  slack-bot-backend-stats:
    enabled: '"${env:ENABLE_FUNCTION_SLACK_BOT_BACKEND_STATS}" == "true"'
    handler: src/bot/slack-bot-backend-stats/index.run
    events:
      - schedule: rate(4 hours)
    timeout: 20 # in seconds
    environment:
      MONGODB_URL: ${env:MONGODB_URL_R}

  maker-fee-collector:
    enabled: '"${env:ENABLE_FUNCTION_MAKER_FEE_COLLECTOR}" == "true"'
    handler: src/bot/maker-fee-collector/index.run
    events:
      - schedule: rate(1 day)
    timeout: 20 # in seconds
    environment:
      MONGODB_URL: ${env:MONGODB_URL_RW}

  recon-collector:
    enabled: '"${env:ENABLE_FUNCTION_RECON}" == "true"'
    handler: src/recon/index.run
    events:
      - schedule: rate(2 hours)
    timeout: 180 # in seconds
    environment:
      MONGODB_URL: ${env:MONGODB_URL_RW}

  graphql:
    enabled: '"${env:ENABLE_FUNCTION_GRAPHQL}" == "true"'
    handler: src/graphql/index.run
    events:
      - http:
          path: graphql
          method: post
          cors: true
      - http:
          path: graphql
          method: get
          cors: true
    environment:
      MONGODB_URL: ${env:MONGODB_URL_R}

custom:
  serverlessPluginTypescript:
    tsConfigFileLocation: "./tsconfig.serverless.json"
  serverless-offline:
    httpPort: 4000
