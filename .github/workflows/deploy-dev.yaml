#
# Github Actions for Serverless Framework
#
# Create AWS_KEY and AWS_SECRET secrets in Github repository settings
# If you're using env.yml file, store its content as ENV Github secret
#
# develop branch will be deployed as DEV and every new tag starting with "v**" (e.g. v1.0, v1.2, v2.0, etc) will be deployed as PROD
#
# Learn more: https://maxkostinevich.com/blog/how-to-deploy-serverless-applications-using-github-actions/
#

name: Deploy Dev
on:
  push:
    branches:
      # - develop
      - ASTRO-1736-add-ci-cd-in-the-api-repository
jobs:
  deploy-dev:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-node@v1
        with:
          node-version: "14.x"
      - name: Install Serverless Framework
        run: npm install -g serverless
      - name: Serverless AWS authentication
        run: sls config credentials --provider aws --key ${{ secrets.AWS_KEY }} --secret ${{ secrets.AWS_SECRET }}
      - name: Create env file
        run: |
          echo -e 'MONGODB_URL_R="${{ secrets.DEV_MONGO_URL_R }}"' >> .env.dev
          echo -e 'MONGODB_URL_RW="${{ secrets.DEV_MONGO_URL_RW }}"' >> .env.dev 
          echo -e 'COINGECKO_API_KEY="${{ secrets.COINGECKO_API_KEY }}"' >> .env.dev
          echo -e 'MAKER_FEE_COLLECTOR_SEED="${{ secrets.MAKER_FEE_COLLECTOR_SEED }}"' >> .env.dev
          echo -e 'GOVERNANCE_TRIGGER_BOT_SEED="${{ secrets.GOVERNANCE_TRIGGER_BOT_SEED }}"' >> .env.dev
      - name: Install NPM dependencies
        #npm ci works better to match package-lock
        run: npm ci
      - name: Copy env file for test
        run: cp .env.dev .env
      - name: Run Test
        run: npm run test

      # Optional
      #- name: Build assets
      #  run: npm run assets-dev
      # - name: Deploy Lambda functions
      #   run: sls deploy -s dev
    # Optional (to use with serverless-finch serverless plugin)
    #- name: Deploy assets to S3
    #  run: sls client deploy --no-delete-contents --no-confirm -s dev
